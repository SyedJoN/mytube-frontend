/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WatchRouteImport } from './routes/watch'
import { Route as UsernameRouteImport } from './routes/$username'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SearchQueryRouteImport } from './routes/search/$query'
import { Route as UsernameVideosRouteImport } from './routes/$username.videos'
import { Route as UsernamePlaylistsRouteImport } from './routes/$username.playlists'
import { Route as UsernameCommunityRouteImport } from './routes/$username.community'

const WatchRoute = WatchRouteImport.update({
  id: '/watch',
  path: '/watch',
  getParentRoute: () => rootRouteImport,
} as any)
const UsernameRoute = UsernameRouteImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchQueryRoute = SearchQueryRouteImport.update({
  id: '/search/$query',
  path: '/search/$query',
  getParentRoute: () => rootRouteImport,
} as any)
const UsernameVideosRoute = UsernameVideosRouteImport.update({
  id: '/videos',
  path: '/videos',
  getParentRoute: () => UsernameRoute,
} as any)
const UsernamePlaylistsRoute = UsernamePlaylistsRouteImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => UsernameRoute,
} as any)
const UsernameCommunityRoute = UsernameCommunityRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => UsernameRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$username': typeof UsernameRouteWithChildren
  '/watch': typeof WatchRoute
  '/$username/community': typeof UsernameCommunityRoute
  '/$username/playlists': typeof UsernamePlaylistsRoute
  '/$username/videos': typeof UsernameVideosRoute
  '/search/$query': typeof SearchQueryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$username': typeof UsernameRouteWithChildren
  '/watch': typeof WatchRoute
  '/$username/community': typeof UsernameCommunityRoute
  '/$username/playlists': typeof UsernamePlaylistsRoute
  '/$username/videos': typeof UsernameVideosRoute
  '/search/$query': typeof SearchQueryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$username': typeof UsernameRouteWithChildren
  '/watch': typeof WatchRoute
  '/$username/community': typeof UsernameCommunityRoute
  '/$username/playlists': typeof UsernamePlaylistsRoute
  '/$username/videos': typeof UsernameVideosRoute
  '/search/$query': typeof SearchQueryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$username'
    | '/watch'
    | '/$username/community'
    | '/$username/playlists'
    | '/$username/videos'
    | '/search/$query'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$username'
    | '/watch'
    | '/$username/community'
    | '/$username/playlists'
    | '/$username/videos'
    | '/search/$query'
  id:
    | '__root__'
    | '/'
    | '/$username'
    | '/watch'
    | '/$username/community'
    | '/$username/playlists'
    | '/$username/videos'
    | '/search/$query'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UsernameRoute: typeof UsernameRouteWithChildren
  WatchRoute: typeof WatchRoute
  SearchQueryRoute: typeof SearchQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/watch': {
      id: '/watch'
      path: '/watch'
      fullPath: '/watch'
      preLoaderRoute: typeof WatchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$username': {
      id: '/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof UsernameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/$query': {
      id: '/search/$query'
      path: '/search/$query'
      fullPath: '/search/$query'
      preLoaderRoute: typeof SearchQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$username/videos': {
      id: '/$username/videos'
      path: '/videos'
      fullPath: '/$username/videos'
      preLoaderRoute: typeof UsernameVideosRouteImport
      parentRoute: typeof UsernameRoute
    }
    '/$username/playlists': {
      id: '/$username/playlists'
      path: '/playlists'
      fullPath: '/$username/playlists'
      preLoaderRoute: typeof UsernamePlaylistsRouteImport
      parentRoute: typeof UsernameRoute
    }
    '/$username/community': {
      id: '/$username/community'
      path: '/community'
      fullPath: '/$username/community'
      preLoaderRoute: typeof UsernameCommunityRouteImport
      parentRoute: typeof UsernameRoute
    }
  }
}

interface UsernameRouteChildren {
  UsernameCommunityRoute: typeof UsernameCommunityRoute
  UsernamePlaylistsRoute: typeof UsernamePlaylistsRoute
  UsernameVideosRoute: typeof UsernameVideosRoute
}

const UsernameRouteChildren: UsernameRouteChildren = {
  UsernameCommunityRoute: UsernameCommunityRoute,
  UsernamePlaylistsRoute: UsernamePlaylistsRoute,
  UsernameVideosRoute: UsernameVideosRoute,
}

const UsernameRouteWithChildren = UsernameRoute._addFileChildren(
  UsernameRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsernameRoute: UsernameRouteWithChildren,
  WatchRoute: WatchRoute,
  SearchQueryRoute: SearchQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
